%{
fid = fopen('train-images.idx3-ubyte','r');
A = fread(fid);
disp(size(A));

fid = fopen('train-labels.idx1-ubyte','r');
A = fread(fid);
disp(size(A));
%}

trainFile       = 'train.csv';
testFile        = 'test.csv';
newTestsFile    = 'newtests.csv';

%read
originalLabels = csvread(trainFile, 1, 1);
originalLabels = originalLabels';

originalTargets = csvread(trainFile, 1, 0, [1 0 size(originalLabels,2) 0]);
originalTargets = originalTargets';

trainVectors = originalLabels;
classes = max(originalTargets) - min(originalTargets) + 1;
trainLabels = zeros(classes,size(originalTargets,2)); %1...max
for i = 1:size(originalTargets,2)
    trainLabels(originalTargets(i) + 1,i) = 1;
end

disp(size(trainVectors));
disp(size(trainLabels));
disp(originalTargets([1:15]));
disp(trainLabels(:,[1:15]));


%add samples for train
count = 1000;
sigma = 0.15;
[newTrainVectors, newTrainLabels] = AddTests(testFile, newTestsFile, classes); %1...max
trainVectors = [trainVectors newTrainVectors];
trainLabels = [trainLabels newTrainLabels];

[newTrainVectors, newTrainLabels] = DistrurbRandomSamples(trainVectors, trainLabels, count, sigma);

%read tests
tests = csvread(testFile, 1, 0);
tests = tests';
disp(size(tests));
[output1,net1] = Train(trainVectors, trainLabels, tests);

value = 0.5;
n = size(tests,2);

for i = 1:n
    curent = (simulate(:,1,i) > value);
   
    [val, idx] = max(curent);
    
    answers(1,i) = idx(1);
    if val == 0    
        curent = (simulate(:,1,i) > 0.3);
        curent  = curent + (simulate(:,2,i)> value2);
        curent  = curent + (simulate(:,3,i)> value2);
        curent  = curent + (simulate(:,4,i)> value2);
        curent  = curent + (simulate(:,4,i)> value2);
        curent  = curent + (simulate(:,5,i)> value2);
        [val, idx] = max(curent);
    
        answers(1,i) = idx(1);
    end
end
   

answers = zeros(size(tests,2),1);


%write
final = zeros(size(tests,2),2);
final(:,2) = answers;
final(:,1) = 1:size(final,1);

csvwrite('submission.csv',final);
csvwrite('.\tests\submission.csv',final);